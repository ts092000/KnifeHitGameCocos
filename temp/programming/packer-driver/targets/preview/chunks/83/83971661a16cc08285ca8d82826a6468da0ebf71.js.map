{"version":3,"sources":["file:///C:/Users/ADMIN/ThrowKnifeGame/assets/Scripts/Game.ts"],"names":["_decorator","Component","Node","tween","Vec3","instantiate","director","Label","ccclass","property","Game","type","onLoad","canThrow","spriteWoodRotation","arrayKnife","defaultSpriteKnife","spriteKnife","position","node","on","EventType","TOUCH_START","knifeThrow","onDestroy","off","start","update","deltaTime","spriteWood","angle","knife","rad","Math","PI","knifeX","x","knifeY","cos","y","sin","setPosition","spriteKnifeMove","to","z","call","gap","isHit","easing","console","log","loadScene","union","knifeNode","addChild","push"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, tween, Vec3, instantiate, director, Label } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('Game')\r\nexport class Game extends Component {\r\n    @property({type:Node})\r\n        spriteWood: Node\r\n\r\n    @property({type:Node})\r\n        spriteKnife: Node\r\n\r\n    @property({type:Label})\r\n        scoreLabel: Label\r\n\r\n    static canThrow: boolean = false;\r\n    static spriteWoodRotation: number = null;\r\n    static defaultSpriteKnife = null;\r\n    static arrayKnife: Node[] = [];\r\n\r\n    onLoad() {\r\n        Game.canThrow = true;\r\n        Game.spriteWoodRotation = 1.5;\r\n        Game.arrayKnife = [];\r\n        Game.defaultSpriteKnife = this.spriteKnife.position;\r\n\r\n        this.node.on(Node.EventType.TOUCH_START, this.knifeThrow, this);\r\n    }\r\n\r\n    onDestroy() {\r\n        this.node.off(Node.EventType.TOUCH_START, this.knifeThrow, this);\r\n    }\r\n\r\n    start() {\r\n\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        this.spriteWood.angle = (this.spriteWood.angle + Game.spriteWoodRotation) % 360;\r\n\r\n        for (let knife of Game.arrayKnife) {\r\n            knife.angle = (knife.angle + Game.spriteWoodRotation) % 360;\r\n\r\n            let rad = Math.PI * (knife.angle - 90) / 180;\r\n\r\n            let knifeX = knife.position.x;\r\n            let knifeY = knife.position.x;\r\n\r\n            knifeX = this.spriteWood.position.x + 239 * Math.cos(rad);\r\n            knifeY = this.spriteWood.position.y + 239 * Math.sin(rad);\r\n\r\n            knife.setPosition(new Vec3(knifeX, knifeY, 0.5));\r\n        }\r\n    }\r\n\r\n    knifeThrow() {\r\n        if (Game.canThrow) {\r\n            Game.canThrow = false;\r\n            let spriteKnifeMove = tween(this.spriteKnife)\r\n                .to(0.25, {position: new Vec3(this.spriteWood.position.x, this.spriteWood.position.y - 239, this.spriteWood.position.z)})\r\n                .call(() => {\r\n                    let gap = 15;\r\n                    let isHit = false;\r\n\r\n                    for (let knife of Game.arrayKnife) {\r\n                        if (knife.angle < gap || (360 - knife.angle) < gap) {\r\n                            isHit = true;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (isHit) {\r\n                        tween(this.spriteKnife)\r\n                            .to(0.25, {position: new Vec3(this.spriteKnife.position.x, -900, this.spriteKnife.position.z)} , { easing: 'bounceInOut' })\r\n                            .call(() => {\r\n                                console.log('GameOver');\r\n                                director.loadScene('Game');\r\n                            }).union().start()\r\n                    }\r\n                    else {\r\n                        let knifeNode = instantiate(this.spriteKnife);\r\n                        knifeNode.setPosition(this.spriteKnife.position);\r\n                        this.node.addChild(knifeNode);\r\n                        Game.arrayKnife.push(knifeNode);\r\n    \r\n                        this.spriteKnife.setPosition(this.spriteKnife.position);\r\n                        console.log(this.spriteKnife.position);\r\n                        Game.canThrow = true;\r\n                    }\r\n                });\r\n            spriteKnifeMove.start();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"]}